	@ResponseBody
Descrição: Devolver à chamada da requisição como resposta o retorno de um determinado método
Geralmente acompanhada pela anotação @RequestMapping nos GET, para responder uma informação retornada naquele method

Exemplo: 

@Controller
public class controller {

    @RequestMapping("/topicos")
    @ResponseBody
    public List<Topico> listaTopicos() {

        Topico topico = new Topico("Conexto em Flutter", "O que é extamente um contexto em Flutter?",
                new Curso("Flutter", "Programação"));

        return Arrays.asList(topico, topico);

    }

}


RESULTADO: uma um json contendo as informações desses tópicos dentro de um array será exibido para quem acessar 
esse endereço

OBS: caso o responseBody não ser definido, a expectativa do Spring é que sera recebido um página para 
o redirecionamento, se isso não acontecer, não será disponibilizado qualquer informação







	@RestController
Descrição: Distingue do controller puro, pela capacidade de representar qualquer retorno do respectivo método que 
esteja sendo chamada sem que seja inserido a anotação anterior (@ResponseBody)



Para evitar repetir a URL em todos os métodos, devemos 
utilizar a anotação @RequestMapping em cima da classe controller;


Para mapear requisições do tipo POST, devemos utilizar a anotação @PostMapping



Exemplo: 

@RestController
@RequestMapping("/topicos")
public class controller {

    @Autowired
    private TopicoRepository topicoRepository;

    @Autowired
    private CursoRepository cursoRepository;

    @GetMapping
    public List<TopicoDTO> listaTopicos(String nomeCurso) {

        if(nomeCurso == null) {
            List<Topico> topicos = topicoRepository.findAll();
            return TopicoDTO.conversor(topicos);
        }
        else {
            List<Topico> topicos = topicoRepository.findByCurso_Nome(nomeCurso);
            return TopicoDTO.conversor(topicos);
        }

    }

    @PostMapping
    public ResponseEntity<TopicoDTO> cadastrar(@RequestBody TopicoForm form, UriComponentsBuilder uriBuilder) {
        Topico topico = form.conversor(cursoRepository);
        topicoRepository.save(topico);

        URI uri = uriBuilder.path("/topicos/{id}").buildAndExpand(topico.getId()).toUri();
        return ResponseEntity.created(uri).body(new TopicoDTO(topico));
    }


}


//OBS:A boa prática para métodos que cadastram informações é devolver o código HTTP 201, ao invés do código 200.
Por isso que o Post acima, é do tipo ResponseEntity, associado ao respectivo tipo do objeto sendo cadastrado.
E, finalmente, é respondido com a resposta esperada: ResponseEntity.created.
